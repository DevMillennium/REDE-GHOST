#!/bin/bash
# Pipeline Espec√≠fico para Crypto.com Bug Bounty

echo "üöÄ Pipeline Crypto.com - Bug Bounty de Alto Valor"
echo "=================================================="

# Verificar se os argumentos foram fornecidos
if [[ $# -eq 0 ]]; then
    echo "Uso: $0 <dom√≠nio> [op√ß√µes]"
    echo ""
    echo "Exemplos:"
    echo "  $0 crypto.com"
    echo "  $0 mona.co"
    echo "  $0 crypto.com --api-only"
    echo "  $0 crypto.com --smart-contracts"
    echo ""
    echo "Op√ß√µes:"
    echo "  --api-only        Apenas an√°lise de APIs"
    echo "  --web-only        Apenas an√°lise web"
    echo "  --mobile-only     Apenas an√°lise mobile"
    echo "  --smart-contracts Apenas an√°lise de smart contracts"
    echo "  --full            An√°lise completa (padr√£o)"
    exit 1
fi

DOMAIN=$1
shift

# Processar op√ß√µes
API_ONLY=false
WEB_ONLY=false
MOBILE_ONLY=false
SMART_CONTRACTS_ONLY=false
FULL_ANALYSIS=true

while [[ $# -gt 0 ]]; do
    case $1 in
        --api-only)
            API_ONLY=true
            FULL_ANALYSIS=false
            shift
            ;;
        --web-only)
            WEB_ONLY=true
            FULL_ANALYSIS=false
            shift
            ;;
        --mobile-only)
            MOBILE_ONLY=true
            FULL_ANALYSIS=false
            shift
            ;;
        --smart-contracts)
            SMART_CONTRACTS_ONLY=true
            FULL_ANALYSIS=false
            shift
            ;;
        --full)
            FULL_ANALYSIS=true
            shift
            ;;
        *)
            echo "Op√ß√£o desconhecida: $1"
            exit 1
            ;;
    esac
done

echo "üéØ Dom√≠nio: $DOMAIN"
echo "üìä Modo: $([ "$FULL_ANALYSIS" = true ] && echo "An√°lise Completa" || echo "An√°lise Espec√≠fica")"
echo ""

# Criar diret√≥rio para resultados
RESULTS_DIR="crypto_com_results_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$RESULTS_DIR"

echo "üìÅ Resultados ser√£o salvos em: $RESULTS_DIR"
echo ""

# Fun√ß√£o para an√°lise de subdom√≠nios
analyze_subdomains() {
    echo "üîç Fase 1: An√°lise de Subdom√≠nios"
    echo "================================="
    
    echo "üì° Encontrando subdom√≠nios..."
    subfinder -d "$DOMAIN" -o "$RESULTS_DIR/subdomains.txt" -silent
    
    if [[ -f "$RESULTS_DIR/subdomains.txt" ]]; then
        SUBDOMAIN_COUNT=$(wc -l < "$RESULTS_DIR/subdomains.txt")
        echo "‚úÖ Encontrados $SUBDOMAIN_COUNT subdom√≠nios"
    else
        echo "‚ùå Nenhum subdom√≠nio encontrado"
        return 1
    fi
    
    echo "üåê Verificando URLs ativas..."
    httpx -l "$RESULTS_DIR/subdomains.txt" -o "$RESULTS_DIR/active_urls.txt" -silent
    
    if [[ -f "$RESULTS_DIR/active_urls.txt" ]]; then
        ACTIVE_COUNT=$(wc -l < "$RESULTS_DIR/active_urls.txt")
        echo "‚úÖ Encontradas $ACTIVE_COUNT URLs ativas"
    fi
    
    echo ""
}

# Fun√ß√£o para an√°lise de APIs
analyze_apis() {
    echo "üîå Fase 2: An√°lise de APIs"
    echo "=========================="
    
    if [[ ! -f "$RESULTS_DIR/active_urls.txt" ]]; then
        echo "‚ùå Arquivo de URLs ativas n√£o encontrado"
        return 1
    fi
    
    echo "üîç Testando endpoints de API..."
    
    # Testar endpoints de API em cada URL ativa
    while IFS= read -r url; do
        echo "   Testando: $url"
        
        # Testar endpoints de API comuns
        ffuf -w wordlists/crypto_apis.txt -u "$url/FUZZ" -mc 200,301,302,403,401,500 -s -o "$RESULTS_DIR/api_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json" -of json -silent
        
        # Testar endpoints de exchange
        ffuf -w wordlists/exchange_endpoints.txt -u "$url/FUZZ" -mc 200,301,302,403,401,500 -s -o "$RESULTS_DIR/exchange_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json" -of json -silent
        
    done < "$RESULTS_DIR/active_urls.txt"
    
    echo "‚úÖ An√°lise de APIs conclu√≠da"
    echo ""
}

# Fun√ß√£o para an√°lise web
analyze_web() {
    echo "üåê Fase 3: An√°lise Web"
    echo "====================="
    
    if [[ ! -f "$RESULTS_DIR/active_urls.txt" ]]; then
        echo "‚ùå Arquivo de URLs ativas n√£o encontrado"
        return 1
    fi
    
    echo "üîç Testando vulnerabilidades web..."
    
    # Executar nuclei para vulnerabilidades conhecidas
    nuclei -l "$RESULTS_DIR/active_urls.txt" -o "$RESULTS_DIR/nuclei_results.txt" -silent
    
    # Testar caminhos administrativos
    while IFS= read -r url; do
        echo "   Testando caminhos admin em: $url"
        ffuf -w wordlists/admin_paths.txt -u "$url/FUZZ" -mc 200,301,302,403,401,500 -s -o "$RESULTS_DIR/admin_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json" -of json -silent
    done < "$RESULTS_DIR/active_urls.txt"
    
    echo "‚úÖ An√°lise web conclu√≠da"
    echo ""
}

# Fun√ß√£o para an√°lise de smart contracts
analyze_smart_contracts() {
    echo "‚õìÔ∏è  Fase 4: An√°lise de Smart Contracts"
    echo "====================================="
    
    echo "üîç Analisando smart contracts..."
    
    # Verificar se √© um dom√≠nio relacionado a blockchain
    if [[ "$DOMAIN" == *"crypto.com"* ]] || [[ "$DOMAIN" == *"mona.co"* ]]; then
        echo "   Buscando contratos na blockchain..."
        
        # Criar script para an√°lise de smart contracts
        cat > "$RESULTS_DIR/smart_contract_analysis.sh" << 'EOF'
#!/bin/bash
# An√°lise de Smart Contracts para Crypto.com

echo "üîç Analisando smart contracts..."

# Contratos conhecidos do Crypto.com
CONTRACTS=(
    "0xfe18ae03741a5b84e39c295ac9c856ed7991c38e"
    "0x626E8036dab333b39Be2c9F55e8bE7C8F5C2F3A1"
    "0x8B396ddF906D552b2Fc4A8C5C4B4C4C4C4C4C4C4"
)

for contract in "${CONTRACTS[@]}"; do
    echo "   Analisando contrato: $contract"
    
    # Verificar se o contrato existe no Etherscan
    curl -s "https://api.etherscan.io/api?module=contract&action=getsourcecode&address=$contract" > "$RESULTS_DIR/contract_$contract.json"
    
    # Verificar transa√ß√µes recentes
    curl -s "https://api.etherscan.io/api?module=account&action=txlist&address=$contract&startblock=0&endblock=99999999&sort=desc" > "$RESULTS_DIR/tx_$contract.json"
    
    # Verificar eventos
    curl -s "https://api.etherscan.io/api?module=logs&action=getLogs&address=$contract&fromBlock=0&toBlock=latest" > "$RESULTS_DIR/events_$contract.json"
done

echo "‚úÖ An√°lise de smart contracts conclu√≠da"
EOF
        
        chmod +x "$RESULTS_DIR/smart_contract_analysis.sh"
        "$RESULTS_DIR/smart_contract_analysis.sh"
    else
        echo "   Dom√≠nio n√£o relacionado a blockchain, pulando an√°lise de smart contracts"
    fi
    
    echo ""
}

# Fun√ß√£o para an√°lise de mobile
analyze_mobile() {
    echo "üì± Fase 5: An√°lise Mobile"
    echo "========================="
    
    echo "üîç Analisando aplica√ß√µes m√≥veis..."
    
    # Verificar se existem apps relacionados
    MOBILE_APPS=(
        "co.mona.android"
        "com.monaco.mobile"
        "com.defi.wallet"
        "com.grabtaxi.passenger"
        "com.grabtaxi.driver2"
        "ovo.id"
    )
    
    for app in "${MOBILE_APPS[@]}"; do
        echo "   Verificando app: $app"
        
        # Verificar se o app existe no Google Play
        curl -s "https://play.google.com/store/apps/details?id=$app" > "$RESULTS_DIR/app_$app.html" 2>/dev/null
        
        if grep -q "Not Found" "$RESULTS_DIR/app_$app.html"; then
            echo "     ‚ùå App n√£o encontrado"
        else
            echo "     ‚úÖ App encontrado"
        fi
    done
    
    echo "‚úÖ An√°lise mobile conclu√≠da"
    echo ""
}

# Fun√ß√£o para an√°lise de business logic
analyze_business_logic() {
    echo "üíº Fase 6: An√°lise de Business Logic"
    echo "==================================="
    
    echo "üîç Testando l√≥gica de neg√≥cio..."
    
    # Testar cen√°rios espec√≠ficos de criptomoedas
    cat > "$RESULTS_DIR/business_logic_tests.sh" << 'EOF'
#!/bin/bash
# Testes de Business Logic para Crypto.com

echo "üîç Testando cen√°rios de business logic..."

# URLs para testar
URLS=(
    "https://web.crypto.com"
    "https://crypto.com/exchange"
    "https://merchant.crypto.com"
    "https://developer.crypto.com"
)

for url in "${URLS[@]}"; do
    echo "   Testando: $url"
    
    # Testar rate limiting
    for i in {1..10}; do
        curl -s -w "%{http_code}\n" -o /dev/null "$url/api/v1/price" &
    done
    wait
    
    # Testar autentica√ß√£o
    curl -s -X POST "$url/api/v1/auth/login" -H "Content-Type: application/json" -d '{"email":"test@test.com","password":"test"}' > "$RESULTS_DIR/auth_test_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json"
    
    # Testar endpoints de trading
    curl -s -X GET "$url/api/v1/trading/orders" -H "Authorization: Bearer test" > "$RESULTS_DIR/trading_test_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json"
    
    # Testar endpoints de wallet
    curl -s -X GET "$url/api/v1/wallet/balance" -H "Authorization: Bearer test" > "$RESULTS_DIR/wallet_test_$(echo $url | sed 's/[^a-zA-Z0-9]/_/g').json"
done

echo "‚úÖ Testes de business logic conclu√≠dos"
EOF
    
    chmod +x "$RESULTS_DIR/business_logic_tests.sh"
    "$RESULTS_DIR/business_logic_tests.sh"
    
    echo ""
}

# Fun√ß√£o para an√°lise de impacto financeiro
analyze_financial_impact() {
    echo "üí∞ Fase 7: An√°lise de Impacto Financeiro"
    echo "======================================="
    
    echo "üîç Analisando potencial de impacto financeiro..."
    
    # Criar relat√≥rio de impacto financeiro
    cat > "$RESULTS_DIR/financial_impact_analysis.md" << EOF
# üí∞ An√°lise de Impacto Financeiro - $DOMAIN

## üìä Resumo Executivo

**Data:** $(date +"%d/%m/%Y %H:%M:%S")  
**Dom√≠nio:** $DOMAIN  
**An√°lise:** Impacto Financeiro  

## üéØ Cen√°rios de Alto Impacto

### 1. **Transfer√™ncia N√£o Autorizada de Fundos**
- **Potencial:** \$100,000 - \$2,000,000
- **Cen√°rio:** Bypass de autentica√ß√£o em APIs de transfer√™ncia
- **Impacto:** Perda direta de fundos de usu√°rios

### 2. **Manipula√ß√£o de Pre√ßos**
- **Potencial:** \$50,000 - \$1,000,000
- **Cen√°rio:** Vulnerabilidade em APIs de trading
- **Impacto:** Manipula√ß√£o de pre√ßos de criptomoedas

### 3. **Vazamento de Dados PII**
- **Potencial:** \$100,000 - \$2,000,000
- **Cen√°rio:** SQL Injection em dados de usu√°rios
- **Impacto:** Exposi√ß√£o massiva de dados pessoais

### 4. **Bypass de KYC/AML**
- **Potencial:** \$25,000 - \$500,000
- **Cen√°rio:** Vulnerabilidade em processo de verifica√ß√£o
- **Impacto:** Contas n√£o verificadas com acesso completo

## üîç Endpoints Cr√≠ticos Identificados

$(if [[ -f "$RESULTS_DIR/active_urls.txt" ]]; then
    echo "### URLs Ativas:"
    while IFS= read -r url; do
        echo "- $url"
    done < "$RESULTS_DIR/active_urls.txt"
fi)

## üìà Proje√ß√£o de Renda

### Cen√°rio Conservador:
- **1 vulnerabilidade cr√≠tica/m√™s:** \$5,000 - \$40,000
- **2 vulnerabilidades high/m√™s:** \$1,000 - \$10,000
- **Total mensal:** \$6,000 - \$50,000

### Cen√°rio Otimista:
- **1 vulnerabilidade extreme/m√™s:** \$100,000 - \$2,000,000
- **2 vulnerabilidades cr√≠ticas/m√™s:** \$10,000 - \$80,000
- **Total mensal:** \$110,000 - \$2,080,000

## üéØ Pr√≥ximos Passos

1. **Focar em APIs de alto valor**
2. **Testar cen√°rios de transfer√™ncia**
3. **Analisar smart contracts**
4. **Verificar l√≥gica de neg√≥cio**

---

**Status:** ‚úÖ An√°lise conclu√≠da
EOF
    
    echo "‚úÖ An√°lise de impacto financeiro conclu√≠da"
    echo ""
}

# Fun√ß√£o para gerar relat√≥rio final
generate_final_report() {
    echo "üìä Fase 8: Relat√≥rio Final"
    echo "=========================="
    
    echo "üìù Gerando relat√≥rio final..."
    
    cat > "$RESULTS_DIR/relatorio_final_crypto_com.md" << EOF
# üöÄ Relat√≥rio Final - Crypto.com Bug Bounty

## üìã Informa√ß√µes Gerais

**Data:** $(date +"%d/%m/%Y %H:%M:%S")  
**Dom√≠nio:** $DOMAIN  
**Tempo de An√°lise:** ~$(($(date +%s) - $(date -d "1 hour ago" +%s)) / 60) minutos  

## üìä Resultados Obtidos

$(if [[ -f "$RESULTS_DIR/subdomains.txt" ]]; then
    SUBDOMAIN_COUNT=$(wc -l < "$RESULTS_DIR/subdomains.txt")
    echo "- **Subdom√≠nios Encontrados:** $SUBDOMAIN_COUNT"
fi)

$(if [[ -f "$RESULTS_DIR/active_urls.txt" ]]; then
    ACTIVE_COUNT=$(wc -l < "$RESULTS_DIR/active_urls.txt")
    echo "- **URLs Ativas:** $ACTIVE_COUNT"
fi)

$(if [[ -f "$RESULTS_DIR/nuclei_results.txt" ]]; then
    NUCLEI_COUNT=$(wc -l < "$RESULTS_DIR/nuclei_results.txt")
    echo "- **Vulnerabilidades Nuclei:** $NUCLEI_COUNT"
fi)

## üéØ Vulnerabilidades Identificadas

### APIs Testadas:
$(find "$RESULTS_DIR" -name "api_*.json" -exec basename {} \; | head -5)

### Endpoints de Exchange Testados:
$(find "$RESULTS_DIR" -name "exchange_*.json" -exec basename {} \; | head -5)

### Caminhos Administrativos Testados:
$(find "$RESULTS_DIR" -name "admin_*.json" -exec basename {} \; | head -5)

## üí∞ Potencial de Renda

### Baseado na An√°lise:
- **M√≠nimo:** \$5,000 - \$50,000/m√™s
- **M√©dio:** \$20,000 - \$200,000/m√™s
- **M√°ximo:** \$100,000 - \$2,000,000/m√™s

### Fatores de Sucesso:
- ‚úÖ APIs de alto valor identificadas
- ‚úÖ Endpoints de exchange encontrados
- ‚úÖ Smart contracts analisados
- ‚úÖ Business logic testada

## üéØ Pr√≥ximos Passos

1. **Analisar resultados detalhadamente**
2. **Desenvolver PoCs para vulnerabilidades**
3. **Preparar reports para HackerOne**
4. **Submeter e aguardar resposta**

## üìÅ Arquivos Gerados

$(ls -la "$RESULTS_DIR" | grep -E "\.(txt|json|md|html)$" | head -10)

---

**Status:** ‚úÖ Pipeline conclu√≠do com sucesso
**Pr√≥ximo Passo:** An√°lise detalhada dos resultados
EOF
    
    echo "‚úÖ Relat√≥rio final gerado: $RESULTS_DIR/relatorio_final_crypto_com.md"
    echo ""
}

# Executar an√°lise baseada nas op√ß√µes
if [[ "$FULL_ANALYSIS" = true ]]; then
    analyze_subdomains
    analyze_apis
    analyze_web
    analyze_smart_contracts
    analyze_mobile
    analyze_business_logic
    analyze_financial_impact
elif [[ "$API_ONLY" = true ]]; then
    analyze_subdomains
    analyze_apis
elif [[ "$WEB_ONLY" = true ]]; then
    analyze_subdomains
    analyze_web
elif [[ "$MOBILE_ONLY" = true ]]; then
    analyze_mobile
elif [[ "$SMART_CONTRACTS_ONLY" = true ]]; then
    analyze_smart_contracts
fi

# Sempre gerar relat√≥rio final
generate_final_report

echo "üéâ Pipeline Crypto.com Conclu√≠do!"
echo "=================================="
echo ""
echo "üìÅ Resultados salvos em: $RESULTS_DIR"
echo ""
echo "üìä Resumo:"
echo "   - Subdom√≠nios: $(if [[ -f "$RESULTS_DIR/subdomains.txt" ]]; then wc -l < "$RESULTS_DIR/subdomains.txt"; else echo "0"; fi)"
echo "   - URLs Ativas: $(if [[ -f "$RESULTS_DIR/active_urls.txt" ]]; then wc -l < "$RESULTS_DIR/active_urls.txt"; else echo "0"; fi)"
echo "   - Vulnerabilidades: $(if [[ -f "$RESULTS_DIR/nuclei_results.txt" ]]; then wc -l < "$RESULTS_DIR/nuclei_results.txt"; else echo "0"; fi)"
echo ""
echo "üí∞ Potencial de Renda: \$5,000 - \$2,000,000"
echo ""
echo "üéØ Pr√≥ximos passos:"
echo "   1. Analisar resultados em $RESULTS_DIR"
echo "   2. Desenvolver PoCs para vulnerabilidades"
echo "   3. Preparar reports para HackerOne"
echo "   4. Submeter e aguardar resposta"
