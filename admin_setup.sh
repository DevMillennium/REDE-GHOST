#!/bin/bash

# Script de Configura√ß√£o de Permiss√µes Administrativas
# Autor: Assistente AI
# Vers√£o: 1.0

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_admin() {
    echo -e "${PURPLE}[ADMIN]${NC} $1"
}

# Verificar se est√° rodando como root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_admin "Executando como root - permiss√µes administrativas ativas"
        return 0
    else
        log_warning "Executando sem privil√©gios de root"
        log_info "Algumas otimiza√ß√µes podem requerer sudo"
        return 1
    fi
}

# Configurar permiss√µes de rede
setup_network_permissions() {
    log_admin "Configurando permiss√µes de rede..."
    
    # Permitir captura de pacotes (necess√°rio para Wireshark)
    if command -v wireshark &> /dev/null; then
        log_info "Configurando permiss√µes para Wireshark..."
        sudo chmod 644 /dev/bpf* 2>/dev/null || log_warning "N√£o foi poss√≠vel configurar permiss√µes BPF"
    fi
    
    # Configurar limites de rede
    log_info "Configurando limites de rede..."
    
    # Aumentar limite de conex√µes simult√¢neas
    if [[ -f /etc/sysctl.conf ]]; then
        echo "net.core.somaxconn = 65535" | sudo tee -a /etc/sysctl.conf
        echo "net.ipv4.tcp_max_syn_backlog = 65535" | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p
    fi
    
    log_success "Permiss√µes de rede configuradas"
}

# Configurar permiss√µes de arquivo
setup_file_permissions() {
    log_admin "Configurando permiss√µes de arquivo..."
    
    # Criar diret√≥rios com permiss√µes adequadas
    sudo mkdir -p /opt/bug_hunting/{cache,logs,data}
    sudo chown -R $(whoami):$(id -gn) /opt/bug_hunting
    sudo chmod -R 755 /opt/bug_hunting
    
    # Configurar diret√≥rio de cache
    mkdir -p ~/.cache/bug_hunting/{nuclei,subfinder,httpx}
    chmod 755 ~/.cache/bug_hunting
    
    log_success "Permiss√µes de arquivo configuradas"
}

# Configurar permiss√µes de processo
setup_process_permissions() {
    log_admin "Configurando permiss√µes de processo..."
    
    # Aumentar limites de processo
    ulimit -u 65536 2>/dev/null || log_warning "N√£o foi poss√≠vel aumentar limite de processos"
    ulimit -n 65536 2>/dev/null || log_warning "N√£o foi poss√≠vel aumentar limite de arquivos"
    
    # Configurar nice para processos de bug hunting
    log_info "Configurando prioridades de processo..."
    
    log_success "Permiss√µes de processo configuradas"
}

# Configurar firewall e seguran√ßa
setup_security() {
    log_admin "Configurando seguran√ßa..."
    
    # Verificar se o firewall est√° ativo
    if command -v pfctl &> /dev/null; then
        log_info "Firewall macOS detectado"
        # N√£o desabilitar o firewall, apenas configurar regras se necess√°rio
    fi
    
    # Configurar certificados para intercepta√ß√£o HTTPS
    log_info "Configurando certificados para intercepta√ß√£o..."
    
    # Criar diret√≥rio para certificados
    mkdir -p ~/.mitmproxy
    chmod 700 ~/.mitmproxy
    
    log_success "Configura√ß√µes de seguran√ßa aplicadas"
}

# Configurar otimiza√ß√µes espec√≠ficas do M3
setup_m3_optimizations() {
    log_admin "Configurando otimiza√ß√µes espec√≠ficas do Mac M3..."
    
    # Verificar se √© Apple Silicon
    if [[ $(uname -m) == "arm64" ]]; then
        log_info "Aplicando otimiza√ß√µes para Apple Silicon..."
        
        # Configurar vari√°veis de ambiente para ARM64
        export ARCH="arm64"
        export GOARCH="arm64"
        
        # Otimiza√ß√µes para ferramentas Go
        export GOMAXPROCS=$(sysctl -n hw.ncpu)
        export GOGC=50
        
        # Otimiza√ß√µes para Python
        export PYTHONUNBUFFERED=1
        export PYTHONDONTWRITEBYTECODE=1
        
        log_success "Otimiza√ß√µes do M3 aplicadas"
    else
        log_warning "N√£o √© Apple Silicon - otimiza√ß√µes limitadas"
    fi
}

# Configurar ferramentas com privil√©gios elevados
setup_tool_permissions() {
    log_admin "Configurando permiss√µes das ferramentas..."
    
    # Nuclei - configurar templates com permiss√µes adequadas
    if command -v nuclei &> /dev/null; then
        log_info "Configurando Nuclei..."
        nuclei -update-templates
    fi
    
    # Subfinder - configurar para performance m√°xima
    if command -v subfinder &> /dev/null; then
        log_info "Configurando Subfinder..."
        # Subfinder j√° √© otimizado
    fi
    
    # httpx - configurar rate limits otimizados
    if command -v httpx &> /dev/null; then
        log_info "Configurando httpx..."
        # httpx j√° √© otimizado
    fi
    
    # ffuf - configurar threads otimizadas
    if command -v ffuf &> /dev/null; then
        log_info "Configurando ffuf..."
        # ffuf j√° √© otimizado
    fi
    
    log_success "Permiss√µes das ferramentas configuradas"
}

# Configurar monitoramento administrativo
setup_admin_monitoring() {
    log_admin "Configurando monitoramento administrativo..."
    
    cat > admin_monitor.sh << 'EOF'
#!/bin/bash
# Monitor Administrativo para Bug Hunting

echo "üîê Monitor Administrativo - Bug Hunting Tools"
echo "=============================================="

# Verificar permiss√µes
echo "üîë Verificando Permiss√µes:"
echo "  Usu√°rio: $(whoami)"
echo "  UID: $(id -u)"
echo "  Grupos: $(id -Gn)"
echo "  Root: $([[ $EUID -eq 0 ]] && echo "SIM" || echo "N√ÉO")"

# Verificar limites do sistema
echo ""
echo "üìä Limites do Sistema:"
echo "  Processos: $(ulimit -u)"
echo "  Arquivos: $(ulimit -n)"
echo "  Mem√≥ria: $(ulimit -v)"

# Verificar processos ativos
echo ""
echo "üîÑ Processos Ativos:"
ps aux | grep -E "(nuclei|subfinder|httpx|ffuf|python)" | grep -v grep || echo "Nenhum processo ativo"

# Verificar uso de recursos
echo ""
echo "üíª Recursos do Sistema:"
top -l 1 | head -5

# Verificar rede
echo ""
echo "üåê Status da Rede:"
netstat -i | head -3

# Verificar certificados
echo ""
echo "üîí Certificados:"
ls -la ~/.mitmproxy/ 2>/dev/null || echo "Certificados n√£o encontrados"
EOF

    chmod +x admin_monitor.sh
    log_success "Monitor administrativo configurado"
}

# Configurar scripts de execu√ß√£o privilegiada
setup_privileged_scripts() {
    log_admin "Configurando scripts com privil√©gios elevados..."
    
    # Script para execu√ß√£o com sudo quando necess√°rio
    cat > run_privileged.sh << 'EOF'
#!/bin/bash
# Script para execu√ß√£o com privil√©gios elevados

TOOL=$1
shift

case $TOOL in
    "nuclei")
        echo "üîç Executando Nuclei com privil√©gios elevados..."
        sudo -E nuclei "$@"
        ;;
    "subfinder")
        echo "üì° Executando Subfinder com privil√©gios elevados..."
        sudo -E subfinder "$@"
        ;;
    "httpx")
        echo "üåê Executando httpx com privil√©gios elevados..."
        sudo -E httpx "$@"
        ;;
    "ffuf")
        echo "üîç Executando ffuf com privil√©gios elevados..."
        sudo -E ffuf "$@"
        ;;
    "wireshark")
        echo "üìä Executando Wireshark com privil√©gios elevados..."
        sudo -E wireshark "$@"
        ;;
    *)
        echo "Uso: $0 <ferramenta> [argumentos]"
        echo "Ferramentas dispon√≠veis: nuclei, subfinder, httpx, ffuf, wireshark"
        exit 1
        ;;
esac
EOF

    chmod +x run_privileged.sh
    log_success "Scripts privilegiados configurados"
}

# Fun√ß√£o principal
main() {
    echo "üîê Configura√ß√£o de Permiss√µes Administrativas"
    echo "=============================================="
    
    check_root
    
    setup_network_permissions
    setup_file_permissions
    setup_process_permissions
    setup_security
    setup_m3_optimizations
    setup_tool_permissions
    setup_admin_monitoring
    setup_privileged_scripts
    
    echo ""
    echo "‚úÖ Configura√ß√£o administrativa conclu√≠da!"
    echo ""
    echo "üìã Scripts dispon√≠veis:"
    echo "  - admin_monitor.sh              - Monitor administrativo"
    echo "  - run_privileged.sh <tool>      - Executar ferramentas com privil√©gios"
    echo "  - performance_optimizer.sh      - Otimiza√ß√£o de performance"
    echo ""
    echo "üîß Exemplos de uso:"
    echo "  ./run_privileged.sh nuclei -u https://exemplo.com"
    echo "  ./run_privileged.sh subfinder -d exemplo.com"
    echo "  ./admin_monitor.sh"
    echo ""
    echo "‚ö†Ô∏è  IMPORTANTE:"
    echo "  - Use privil√©gios elevados apenas quando necess√°rio"
    echo "  - Sempre respeite os termos de servi√ßo dos alvos"
    echo "  - Mantenha logs de todas as atividades"
}

# Executar fun√ß√£o principal
main "$@"
